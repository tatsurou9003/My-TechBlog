import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.BLHWSx9w.js";const g=JSON.parse('{"title":"ハッカソンで Amazon Bedrock 使ってみた話","description":"","frontmatter":{},"headers":[],"relativePath":"dev/bedrock.md","filePath":"dev/bedrock.md"}'),t={name:"dev/bedrock.md"},h=n(`<h1 id="ハッカソンで-amazon-bedrock-使ってみた話" tabindex="-1">ハッカソンで Amazon Bedrock 使ってみた話 <a class="header-anchor" href="#ハッカソンで-amazon-bedrock-使ってみた話" aria-label="Permalink to &quot;ハッカソンで Amazon Bedrock 使ってみた話&quot;">​</a></h1><h3 id="こちらの記事は-2024-03-の-shinonome-テックブログを移管しました。" tabindex="-1">こちらの記事は 2024/03 の <a href="https://blog.shinonome.io/amazon-bedrock/" target="_blank" rel="noreferrer">Shinonome テックブログ</a>を移管しました。 <a class="header-anchor" href="#こちらの記事は-2024-03-の-shinonome-テックブログを移管しました。" aria-label="Permalink to &quot;こちらの記事は 2024/03 の [Shinonome テックブログ](https://blog.shinonome.io/amazon-bedrock/)を移管しました。&quot;">​</a></h3><p>こんにちは、開発業務でバックエンドを担当している Tatsuro です。（大学 4 年）🤖</p><p>料理のレシピを AI に生成してもらうアプリを考案し、最近 AWS のサービスを学習していたこともあって、Bedrock を使用してみることにしました。</p><p>figma を使って雑にデザインを起こしました。荒は目立ちますが時間がなかったのでご愛嬌ということで。<br> パラメータとして野菜の種類・主菜 or 副菜・冷 or 温、を選択して送信し、生成されたレシピを受け取ります。<br><img src="http://blog.shinonome.io/content/images/2024/03/design.png" alt="design"></p><h2 id="amazon-bedrock-とは" tabindex="-1">Amazon Bedrock とは <a class="header-anchor" href="#amazon-bedrock-とは" aria-label="Permalink to &quot;Amazon Bedrock とは&quot;">​</a></h2><p>Amazon Bedrock とは、<br> 開発者が主要な AI スタートアップや Amazon が提供する高パフォーマンスな基盤モデルを、統合 API を通じて利用できるようにするフルマネージド型サービス、らしいです。</p><p>簡単に言うと、OpenAI や Claude の API などの生成 AI サービスがカタログ状にまとまっているということです。</p><p>Bedrock を利用するメリットとしては、生成 AI サービスが一覧でまとめられていること・既存の AWS リソースと組み合わせることができる（中でも使い慣れた boto3 の記法で扱うことができ、アプリケーションに組み込むのが容易であることが大きいか？）</p><p><a href="https://aws.amazon.com/jp/bedrock/" target="_blank" rel="noreferrer">https://aws.amazon.com/jp/bedrock/</a></p><h2 id="architecture" tabindex="-1">Architecture <a class="header-anchor" href="#architecture" aria-label="Permalink to &quot;Architecture&quot;">​</a></h2><p>クライアントサイドは Flutter Web、サーバーサイドは AWS のサーバレスアーキテクチャを採用しました（認証は Amplify と cognito でササっと済ませた)。lambda 内の boto3 から Claude の API を叩く構成です。 <img src="http://blog.shinonome.io/content/images/2024/03/architecture.png" alt="architecture"></p><h2 id="lambda-関数" tabindex="-1">Lambda 関数 <a class="header-anchor" href="#lambda-関数" aria-label="Permalink to &quot;Lambda 関数&quot;">​</a></h2><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">東京リージョンで使える基盤モデルが、TitanとClaudeのみだったのでClaudeのv2.1を利用しました。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">バージニアでClaude3 Haiku使った方が安かったけど精度が気になったのでv2.1にしておいた。が、後でちゃんと調べたらHaikuの方が誤答の可能性が低いらしいのでHaikuにしとけばよかった、、（正確で速い上に安いとかメリットしかないじゃん）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lambda_handler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, context):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bedrock_runtime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boto3.client(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">service_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bedrock-runtime&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">region_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;your-region&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;anthropic.claude-v2:1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    指定した野菜、主菜or副菜、温かいor冷たい、の条件で1つの料理の作り方を考えてください。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;日本語で答えてください。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">text</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_tokens </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 300</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: event.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ingredients&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [user_message]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.dumps(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;anthropic_version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bedrock-2023-05-31&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;max_tokens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: max_tokens,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;system&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: prompt,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;messages&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: messages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bedrock_runtime.invoke_model(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">modelId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">model_id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    response_body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json.loads(response.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).read())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;statusCode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;body&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: json.dumps(response_body),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">パラメータとしてeventに含ませる</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ingredients&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;トマト,キュウリ,ナス,温かい,メイン料理&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">レスポンスで生成されたレシピ（json出力をデコードしたもの）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xxxxxxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;role&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;assistant&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;content&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;はい、トマト、キュウリ、ナスを使った温かいメイン料理ですね。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">そこでおすすめするのは「トマトとナスのグラタン」です。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">材料はトマト、ナス、チーズ、粉チーズなど。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">作り方は、</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1. トマトとナスを食べやすい大きさに切る</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2. オーブン耐熱皿にトマト、ナス、チーズを交互に層状に詰め込む</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3. 粉チーズをかける</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">4. 220度のオーブンで15-20分焼く</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">といった感じで、トマトとナスのうまみがグラタンの中でよくからみ合う温かいオーブン料理になります。キュウリはサラダや付け合せで添えればいいバランスの一品になると思います。</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">いかがでしょうか? &quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;model&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;claude-2.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stop_reason&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;max_tokens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stop_sequence&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: null,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;usage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;input_tokens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">91</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   &quot;output_tokens&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>こんな感じでレシピを受け取って apigateway のエンドポイントを通して返却しました。<br> Flutter 側で受け取ったレシピは採用する場合、dynamoDB に post するように別の lambda 関数を利用するようにしました。</p><h2 id="総括-ハッカソンの反省" tabindex="-1">総括（ハッカソンの反省） <a class="header-anchor" href="#総括-ハッカソンの反省" aria-label="Permalink to &quot;総括（ハッカソンの反省）&quot;">​</a></h2><p>今回は、旬な Bedrock を AWS サービスに組み込んで開発してみた話をしました。</p><p>個人的に boto3 の記法に慣れていることもあってすんなり使えました。（Claude の API は叩いたことなかった）</p><p>ハッカソン中、Amplify で Flutter Web の build が出来なかったので、S3&amp;CloudFront でデプロイしました（amplify pull で amplifyconfiguration.dart が生成されずに諦めた）。</p><p>また、今回はコンソールからゴリゴリの手打ちで実装しましたが、Amplify で appsync を使う構成にしたり（今回は auth だけ利用した）、サーバレスフレームワークを使って実装してみたりと改善点は多そうです。</p><p>機能も最低限の実装しか出来なかったため、現在は公開を停止しています。 <a href="https://github.com/tatsurou9003/BrachioCup_2024" target="_blank" rel="noreferrer">https://github.com/tatsurou9003/BrachioCup_2024</a></p><p>また時間があるときに実装してデプロイしようかなあと考えているところです。</p><p><img src="http://blog.shinonome.io/content/images/2024/03/----------2024-03-23-1.02.42.png" alt="----------2024-03-23-1.02.42"> 余談ですが、先日 AWS の SAP を取得しました ✌️（正直、小規模な実開発には役立ちそうにないですが 😢）<br> それでは次回の記事でお会いしましょう、さようなら 👋</p>`,25),p=[h];function l(k,e,E,r,d,o){return a(),i("div",null,p)}const y=s(t,[["render",l]]);export{g as __pageData,y as default};
